// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate_swagger = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/merchant/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat membuat akun merchant untuk kebutuhan pribadi, dengan memasukan no_rekening, address, dan lain lain",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "user yang sudah login dapat membuat akun merchant untuk kebutuhan pribadi, dengan memasukan no_rekening, address, dan lain lain",
                "parameters": [
                    {
                        "description": "Merchant",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/delete/:id": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat menghapus merchant yang ada di bank",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "user yang sudah login dapat menghapus merchant yang ada di bank",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MerchantListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/detail/:id": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat melihat semua merchant yang ada di bank dan dapat melihat detail merchant seperti user dan rekening",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "user yang sudah login dapat melihat semua merchant yang ada di bank dan dapat melihat detail merchant seperti user dan rekening",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MerchantListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat melihat semua merchant yang ada di bank dan dapat melihat detail merchant seperti user dan rekening",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "user yang sudah login dapat melihat semua merchant yang ada di bank dan dapat melihat detail merchant seperti user dan rekening",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MerchantListResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/update/:id": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dan memiliki merchant yang dapat mengupdate merchant tersebut",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Merchant"
                ],
                "summary": "user yang sudah login dan memiliki merchant yang dapat mengupdate merchant tersebut",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Merchant",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/rekening/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat membuka rekening baru dengan memasukan pin saja karena user akan terhubung dengan rekening setelah dibuat",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rekening"
                ],
                "summary": "user yang sudah login dapat membuka rekening baru dengan memasukan pin saja karena user akan terhubung dengan rekening setelah dibuat",
                "parameters": [
                    {
                        "description": "Rekening",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.RekeningEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRekening"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/rekening/detail/:id": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat mengakses rekening yang telah dibuat dengan memberi id rekening",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rekening"
                ],
                "summary": "user yang sudah login dapat mengakses rekening yang telah dibuat dengan memberi id rekening",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.RekeningEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/rekening/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat mengakses rekening yang telah dibuat, sistem akan menyocokan rekening yang telah dibuat oleh user",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rekening"
                ],
                "summary": "user yang sudah login dapat mengakses rekening yang telah dibuat, sistem akan menyocokan rekening yang telah dibuat oleh user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.RekeningEntity"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/rekening/transfer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login baik customer maupun merchant dapat melakukan transfer uamg ke rekening user yang telah terdaftar",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rekening"
                ],
                "summary": "user yang sudah login baik customer maupun merchant dapat melakukan transfer uamg ke rekening user yang telah terdaftar",
                "parameters": [
                    {
                        "description": "Rekening",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TransferRekening"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TransferRekeningResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/rekening/update/:id": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user yang sudah login dapat mengupdate balance yang ke rekening yang sudah ada dengan memasukkan pin dan sejumlah uang yang ingin dimasukkan",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rekening"
                ],
                "summary": "user yang sudah login dapat mengupdate balance yang ke rekening yang sudah ada dengan memasukkan pin dan sejumlah uang yang ingin dimasukkan",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rekening",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRekening"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRekeningResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login yang dilakukan setelah user melakukan register, jika sudah berhasil maka pengguna akan mendapatkan token yang akan digunakan untuk mengakses API",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Form"
                ],
                "summary": "Login yang dilakukan setelah user melakukan register, jika sudah berhasil maka pengguna akan mendapatkan token yang akan digunakan untuk mengakses API",
                "parameters": [
                    {
                        "description": "User",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDtoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Logout dapat dilakukan oleh user yang sudah login, jika sudah berhasil",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Form"
                ],
                "summary": "Logout dapat dilakukan oleh user yang sudah login, jika sudah berhasil",
                "parameters": [
                    {
                        "description": "User",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutDtoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register yang dilakukan oleh user baik dia sebagai consumer maupun merchant untuk pengembalian data nya akan mengembalikan user yang sudah terdaftar dengan password yang sudah di hash",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Form"
                ],
                "summary": "Register yang dilakukan oleh user baik dia sebagai consumer maupun merchant untuk pengembalian data nya akan mengembalikan user yang sudah terdaftar dengan password yang sudah di hash",
                "parameters": [
                    {
                        "description": "User",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.UserEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.LoginDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.LoginDtoResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.LogoutDtoResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.MerchantListResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "no_rekening": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "rekneing": {
                    "$ref": "#/definitions/entity.RekeningEntity"
                },
                "user": {
                    "$ref": "#/definitions/entity.UserEntity"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterRekening": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "no_rekening": {
                    "type": "string"
                }
            }
        },
        "dto.TransferRekening": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "no_rekening": {
                    "type": "string"
                },
                "pin": {
                    "type": "string"
                }
            }
        },
        "dto.TransferRekeningResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "no_rekening": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateRekening": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "pin": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateRekeningResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.MerchantEntity": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Post Address\n@Column(type:string)",
                    "type": "string"
                },
                "created_at": {
                    "description": "Post Created At\n@Column(type:datetime)",
                    "type": "string"
                },
                "id": {
                    "description": "Post ID\n@PrimaryKey\n@Column(type:uuid, unique: true)",
                    "type": "string"
                },
                "name": {
                    "description": "Post Name\n@Column(type:string)",
                    "type": "string"
                },
                "no_rekening": {
                    "description": "Post No Rekening\n@Column(type:uuid)",
                    "type": "string"
                },
                "phone": {
                    "description": "Post Phone\n@Column(type:string)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Post Updated At\n@Column(type:datetime)",
                    "type": "string"
                },
                "user_id": {
                    "description": "Post User ID\n@Column(type:uuid)",
                    "type": "string"
                }
            }
        },
        "entity.RekeningEntity": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Post Balance\n@Column(type:int)",
                    "type": "integer"
                },
                "chance": {
                    "description": "Post Chance\n@Column(type:datetime)",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Post Created At\n@Column(type:datetime)",
                    "type": "string"
                },
                "id": {
                    "description": "Post ID\n@PrimaryKey\n@Column(type:int, unique: true, autoincrement: true)",
                    "type": "integer"
                },
                "no_rekening": {
                    "description": "Post No Rekening\n@Column(type:uuid, unique: true)",
                    "type": "string"
                },
                "pin": {
                    "description": "Post Pin\n@Column(type:string)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Post Updated At\n@Column(type:datetime)",
                    "type": "string"
                },
                "user_id": {
                    "description": "Post User ID\n@Column(type:uuid)",
                    "type": "string"
                }
            }
        },
        "entity.UserEntity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Post Created At\n@Column(type:datetime)",
                    "type": "string"
                },
                "email": {
                    "description": "Post Email\n@Column(type:string)",
                    "type": "string"
                },
                "id": {
                    "description": "Post ID\n@PrimaryKey\n@Column(type:uuid, unique: true)",
                    "type": "string"
                },
                "is_active": {
                    "description": "Post IsActive\n@Column(type:boolean)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Post Name\n@Column(type:string)",
                    "type": "string"
                },
                "password": {
                    "description": "Post Email\n@Column(type:string)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Post Updated At\n@Column(type:datetime)",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo_swagger holds exported Swagger Info so clients can modify it
var SwaggerInfo_swagger = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Gin Swagger Example API",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate_swagger,
}

func init() {
	swag.Register(SwaggerInfo_swagger.InstanceName(), SwaggerInfo_swagger)
}
